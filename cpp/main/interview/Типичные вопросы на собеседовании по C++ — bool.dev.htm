<!DOCTYPE html>
<html lang="ru"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <link rel="preload" href="%D0%A2%D0%B8%D0%BF%D0%B8%D1%87%D0%BD%D1%8B%D0%B5%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B%20%D0%BD%D0%B0%20%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B8%20%D0%BF%D0%BE%20C++%20%E2%80%94%20bool.dev_files/bundle.css" as="style">
    <link rel="preload" href="%D0%A2%D0%B8%D0%BF%D0%B8%D1%87%D0%BD%D1%8B%D0%B5%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B%20%D0%BD%D0%B0%20%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B8%20%D0%BF%D0%BE%20C++%20%E2%80%94%20bool.dev_files/bundle.js" as="script">
    <link rel="preload" href="%D0%A2%D0%B8%D0%BF%D0%B8%D1%87%D0%BD%D1%8B%D0%B5%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B%20%D0%BD%D0%B0%20%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B8%20%D0%BF%D0%BE%20C++%20%E2%80%94%20bool.dev_files/lazysizes.min.js" as="script">
        <link rel="stylesheet" href="%D0%A2%D0%B8%D0%BF%D0%B8%D1%87%D0%BD%D1%8B%D0%B5%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B%20%D0%BD%D0%B0%20%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B8%20%D0%BF%D0%BE%20C++%20%E2%80%94%20bool.dev_files/bundle.css">
    <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="author" content="bool.dev team">
<meta name="robots" content="all">
<meta name="document-state" content="Dynamic">
<meta name="google-site-verification" content="tK0_xwfq9qhdiR0pWCiqsYbAgh7mJZ6zxthqc9tqXws">
<meta name="wmail-verification" content="45a3c5352698c2237c19690d47985d86">
<meta name="msvalidate.01" content="A034DDDDFE34318054E6584E3EEC13CD">
<meta property="og:title" content="Типичные вопросы на собеседовании по C++">
<meta property="fb:page_id" content="1375105332756993">
<meta property="fb:app_id" content="1375105332756993">

<meta property="og:url" content="https://bool.dev/blog/detail/tipichnye-voprosy-na-sobesedovanii-po-cplusplus">
    <meta name="description" content="Подготовили список типичных вопросов на собеседовании по C++">
    <meta property="og:description" content="Подготовили список типичных вопросов на собеседовании по C++">
    <meta name="twitter:description" content="Подготовили список типичных вопросов на собеседовании по C++">

    <meta name="keywords" content="c++, список вопросов  на собеседование, статья, студенты, типичные вопросы">

    <link rel="canonical" href="https://bool.dev/blog/detail/tipichnye-voprosy-na-sobesedovanii-po-cplusplus">
<meta property="og:type" content="article">
    <meta property="og:image" content="https://joprblob.azureedge.net/site/blog/3d98a0de-2223-42d0-a6da-8d34186037d8/meta.jpg">
    <meta name="og:image:alt" content="Типичные вопросы на собеседовании по C++">
    <meta name="twitter:image:src" content="https://joprblob.azureedge.net/site/blog/3d98a0de-2223-42d0-a6da-8d34186037d8/meta.jpg">
<meta property="twitter:creator" content="@wwwbooldev">
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="@wwwbooldev">
<meta name="twitter:title" content="Типичные вопросы на собеседовании по C++">
<meta name="twitter:domain" content="bool.dev">
    <title>Типичные вопросы на собеседовании по C++ — bool.dev</title>
    <link rel="shortcut icon" href="https://jopr-site.azureedge.net/favicon.ico">
<script type="text/javascript">
	
    var appInsights=window.appInsights||function(a){
        function b(a){c[a]=function(){var b=arguments;c.queue.push(function(){c[a].apply(c,b)})}}var c={config:a},d=document,e=window;setTimeout(function(){var b=d.createElement("script");b.src=a.url||"https://az416426.vo.msecnd.net/scripts/a/ai.0.js",d.getElementsByTagName("script")[0].parentNode.appendChild(b)});try{c.cookie=d.cookie}catch(a){}c.queue=[];for(var f=["Event","Exception","Metric","PageView","Trace","Dependency"];f.length;)b("track"+f.pop());if(b("setAuthenticatedUserContext"),b("clearAuthenticatedUserContext"),b("startTrackEvent"),b("stopTrackEvent"),b("startTrackPage"),b("stopTrackPage"),b("flush"),!a.disableExceptionTracking){f="onerror",b("_"+f);var g=e[f];e[f]=function(a,b,d,e,h){var i=g&&g(a,b,d,e,h);return!0!==i&&c["_"+f](a,b,d,e,h),i}}return c
    }({
        sdkExtension: 'ar',
		endpointUrl: "https://westeurope-3.in.applicationinsights.azure.com//v2/track",
instrumentationKey: '845e0a73-ba62-4f9e-bdac-0821c9686786'
    });

    window.appInsights=appInsights,appInsights.queue&&0===appInsights.queue.length&&appInsights.trackPageView();
	
    </script><script src="%D0%A2%D0%B8%D0%BF%D0%B8%D1%87%D0%BD%D1%8B%D0%B5%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B%20%D0%BD%D0%B0%20%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B8%20%D0%BF%D0%BE%20C++%20%E2%80%94%20bool.dev_files/ai.0.js"></script></head>

<body itemscope="" itemtype="http://schema.org/WebPage">
    <div id="layout">
        <header id="main-header">
            <div class="mobile-logo">
                <a href="https://bool.dev/">
                    <img data-src="https://jopr-site.azureedge.net/src/img/logo.png" class="lazyload" alt="Сообщество IT специалистов" width="125" height="58">
                </a>
            </div>
            <div class="mob-menu-btn rem-2" onclick="showMenu()" id="burger-btn" title="Открыть меню">
                <i class="fas fa-bars"></i>
            </div>
            <div class="mob-menu-btn rem-2 hide" onclick="hideMenu()" id="close-btn" title="Закрыть меню"><i class="fas fa-times"></i></div>
            <div id="top-menu">
                <nav itemscope="" itemtype="http://schema.org/SiteNavigationElement">
                    <ul class="ml-40">
                        <li class="logo">
                            <a href="https://bool.dev/">
                                <img src="%D0%A2%D0%B8%D0%BF%D0%B8%D1%87%D0%BD%D1%8B%D0%B5%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B%20%D0%BD%D0%B0%20%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B8%20%D0%BF%D0%BE%20C++%20%E2%80%94%20bool.dev_files/logo.png" alt="Сообщество IT специалистов" width="125" height="58">
                                <meta itemprop="name" content="Сообщество IT специалистов">
                                <meta itemprop="description" content="Самые актуальные новости из мира IT. Технологии, гаджеты, бизнес, google, apple, мобильные приложения, краудфандинг, новые технологии и новости о крупных компаниях.">
                            </a>
                        </li>
                        <li>
                            <a itemprop="url" class="" href="https://bool.dev/">
                                <span>Главная</span>
                                <meta itemprop="name" content="IT сообщество">
                                <meta itemprop="description" content="Сообщество с статьями, новостями и юмором с IT сферы">
                            </a>
                        </li>
                        <li>
                            <a itemprop="url" class="" href="https://bool.dev/news">
                                <span>Новости</span>
                                <meta itemprop="name" content="Новости IT — Сообщество IT специалистов">
                                <meta itemprop="description" content="Самые актуальные новости из мира IT. Технологии, гаджеты, бизнес, google, apple, мобильные приложения, краудфандинг, новые технологии и новости о крупных компаниях.">
                            </a>
                        </li>
                        <li>
                            <a itemprop="url" class="" href="https://bool.dev/blog">
                                <span>Статьи</span>
                                <meta itemprop="name" content="Статьи для программистов">
                                <meta itemprop="description" content="Обучающие статьи по программированию для улучшения ваших знаний в сфере IT">
                            </a>
                        </li>
                        <li>
                            <a itemprop="url" class="" href="https://bool.dev/fun">
                                <span>Юмор</span>
                                <meta itemprop="name" content="IT Юмор">
                                <meta itemprop="description" content="Страница юмора айтишников для развлечений и поднятия настроения">
                            </a>
                        </li>
                        <li>
                            <a href="https://bit.ly/2oLtbx2" rel="nofollow noopener noreferrer" class="tg-link" title="Наш telegram канал" target="_blank">
                                <i class="fab fa-telegram rem-15 mr-10"></i>
                                <span> bool.dev</span>
                            </a>
                        </li>
                    </ul>
                </nav>
                <div id="user-menu" class="mr-40">
                        <a href="https://bool.dev/account/login">Вход</a>
                        <a href="https://bool.dev/account/register">Регистрация</a>
                </div>
            </div>
        </header>
        <main class="m-40">
            <div class="right-layout">
    <div id="blog-details" class="left">
        <article class="border-container" itemscope="" itemtype="http://schema.org/BlogPosting">
            <meta itemprop="inLanguage" content="ru">
            <div class="content reg">
                <meta itemprop="description" content="Подготовили список типичных вопросов на собеседовании по C++">
                <div class="rem-90">
                    <p style="display: none" itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization">
                        <span itemprop="logo" itemscope="" itemtype="https://schema.org/ImageObject">
                            <link data-rel="url" type="image/png" itemprop="url contentUrl" href="https://jopr-site.azureedge.net/src/img/jopr_link_background.png">
                        </span>
                        <meta itemprop="name" content="bool.dev">
                        <meta itemprop="address" content="Киев">
                        <meta itemprop="email" content="q@jopr.org">
                    </p>
                    <span class="mr-10" title="Автор статьи" itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                        <a class="black none" href="https://bool.dev/users/polishchuk" itemprop="url">
                            <i class="fas fa-user-ninja"></i>
                            <span itemprop="name">polishchuk</span>
                        </a>
                    </span>
                    <span class="mr-10" title="Количество комментариев к статье">
                        <a class="black none" href="#comments"><i class="far fa-comments mr-5"></i>0</a>
                    </span>
                    <span class="mr-10" title="Количество просмотров статьи">
                        <i class="far fa-eye mr-5"></i>11.7K
                    </span>
                    <span itemprop="datePublished" class="mr-10" content="2019-06-02">
                        <i class="far fa-calendar-alt mr-5"></i>02.06.2019
                    </span>

                </div>
                <header class="post-title">
                    <h1 class="no-margin" itemprop="headline">Типичные вопросы на собеседовании по C++</h1>
                </header>

                <div class="mt-15 rem-90">
                    <strong><i class="far fa-list-alt mr-5"></i>Категории:</strong>
                                    <a href="https://bool.dev/blog/category/programmirovanie" class="mr-10 black">Программирование</a>
                                    <a href="https://bool.dev/blog/category/tipichnye-voprosy-na-sobesedovanii" class="mr-10 black">Типичные вопросы на собеседовании</a>
                </div>
                                <figure itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject" class="mt-10 no-margin">
                                    <img itemprop="url" class=" lazyloaded" data-src="https://joprblob.azureedge.net/site/blog/3d98a0de-2223-42d0-a6da-8d34186037d8/img.png" alt="Типичные вопросы на собеседовании по C++" src="%D0%A2%D0%B8%D0%BF%D0%B8%D1%87%D0%BD%D1%8B%D0%B5%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B%20%D0%BD%D0%B0%20%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B8%20%D0%BF%D0%BE%20C++%20%E2%80%94%20bool.dev_files/img.png">
                                    <meta itemprop="url" content="https://joprblob.azureedge.net/site/blog/3d98a0de-2223-42d0-a6da-8d34186037d8/img.png">
                                </figure>
                <div class="mt-20 blog-item detail" itemprop="text articleBody">
                    <h2>Зачем нужен виртуальный деструктор?</h2>

<p>Чтобы избежать возможной утечки ресурсов или другого 
неконтролируемого поведения объекта, в логику работы которого включен 
вызов деструктора.</p>

<pre><code class="language-cpp hljs "><span class="hljs-keyword">class</span> My
{
<span class="hljs-keyword">public</span>:
    <span class="hljs-keyword">virtual</span> ~My()
    {
        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Hello from ~My()"</span> &lt;&lt; <span class="hljs-built_in">std</span>::endl;
    }
};

<span class="hljs-keyword">class</span> Derived : <span class="hljs-keyword">public</span> My
{
<span class="hljs-keyword">public</span>:
    <span class="hljs-keyword">virtual</span> ~Derived()
    {
        <span class="hljs-comment">// Здесь могла бы быть очистка ресурсов</span>
        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Hello from ~Derived()"</span> &lt;&lt; <span class="hljs-built_in">std</span>::endl;
    }
};

My *obj = <span class="hljs-keyword">new</span> Derived();
<span class="hljs-keyword">delete</span> obj;</code></pre>

<h3>Output:</h3>

<pre><code class=" hljs cs">Hello <span class="hljs-keyword">from</span> ~Derived()
Hello <span class="hljs-keyword">from</span> ~My()</code></pre>

<p>Без ключевого слова&nbsp;<strong>virtual</strong>&nbsp;у родительского класса&nbsp;<strong>My</strong>&nbsp;деструктор порожденного класса не был бы вызван. Т.е. вызвался бы только&nbsp;<strong>~My().</strong></p>

<h2>Что стоит помнить при использовании исключений в конструкторе объекта?</h2>

<p>Если исключение не обработано, то c логической точки зрения 
разрушается объект, который еще не создан, а с технической, так как он 
еще не создан, то и деструктор этого объекта&nbsp;<strong>не будет&nbsp;</strong>вызван.</p>

<h3>Например:</h3>

<pre><code class="language-cpp hljs "><span class="hljs-keyword">class</span> Base
{
<span class="hljs-keyword">private</span>: 
    HANDLE m_hFile;

<span class="hljs-keyword">public</span>:
    Base()
    {
        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Hello from Base()"</span> &lt;&lt; <span class="hljs-built_in">std</span>::endl;
        m_hFile = ::CreateFileA(...);
        <span class="hljs-comment">// Вызываем код, который в ходе своего выполнения бросает исключение</span>
        SomeLib.SomeFunc(...);
    }

    <span class="hljs-keyword">virtual</span> ~Base()
    {
        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Hello from ~Base()"</span> &lt;&lt; <span class="hljs-built_in">std</span>::endl;
        <span class="hljs-comment">// Здесь мы планировали закрыть хэндл</span>
        ::CloseHandle(m_hFile);
    }
};

<span class="hljs-keyword">try</span>
{
    Base b;
}
<span class="hljs-keyword">catch</span>(<span class="hljs-keyword">const</span> <span class="hljs-built_in">std</span>::exception &amp;e)
{
    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Exception message: "</span> &lt;&lt; e.what() &lt;&lt; <span class="hljs-built_in">std</span>::endl;
}</code></pre>

<h3>Output:</h3>

<pre><code class=" hljs cs">Hello <span class="hljs-keyword">from</span> Base()
Exception message: Something failed</code></pre>

<p>Здесь могут спросить: «Как бы вы решили эту проблему&nbsp;при 
подобной ситуации». Правильный ответ: «Воспользовался бы умными 
указателями».</p>

<h3>&nbsp;Пример умного указателя:</h3>

<pre><code class="language-cpp hljs "><span class="hljs-keyword">class</span> Base
{
<span class="hljs-keyword">private</span>: 
    <span class="hljs-keyword">class</span> CHandle
    {
    <span class="hljs-keyword">public</span>:
        ~CHandle()
        {
            ::CloseHandle(m_handle);
        }
    <span class="hljs-keyword">private</span>:
        HANDLE m_handle;
    <span class="hljs-keyword">public</span>:
        <span class="hljs-comment">// Для полноценного smart pointer'а перегрузки одной операции</span>
        <span class="hljs-comment">// не достаточно, но для нашего примера и понимания вполне хватит</span>
        <span class="hljs-keyword">void</span> <span class="hljs-keyword">operator</span> = (<span class="hljs-keyword">const</span> HANDLE &amp;handle)
        {
            m_handle = handle;
        }
    };

    CHandle m_hFile;

<span class="hljs-keyword">public</span>:
    Base()
    {
        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Hello from Base()"</span> &lt;&lt; <span class="hljs-built_in">std</span>::endl;
        m_hFile = ::CreateFileA(...);
        <span class="hljs-comment">// Вызываем код, который в ходе своего выполнения бросает исключение</span>
        SomeLib.SomeFunc(...);
    }

    <span class="hljs-keyword">virtual</span> ~Base()
    {
        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Hello from ~Base()"</span> &lt;&lt; <span class="hljs-built_in">std</span>::endl;
    }
...</code></pre>

<p>Теперь и без вызова деструктора&nbsp;<strong>Base</strong>&nbsp;хэндл будет закрыт, т.к. при уничтожении класса&nbsp;<strong>Base</strong>&nbsp;будет уничтожен объект&nbsp;<strong>m_hFile</strong>&nbsp;класса&nbsp;<strong>CHandle</strong>, в деструкторе которого и будет закрыт хэндл.&nbsp;<br>
<br>
Изобретать велосипед, конечно, не надо, все уже написано до нас, например в&nbsp;<strong>boost</strong>,&nbsp;<strong>Loki</strong>,&nbsp;<strong>ATL</strong>&nbsp;и т.п.</p>

<h2>Для каких целей применяется ключевое слово&nbsp;const?</h2>

<ol>
	<li>Позволяет задать константность объекта</li>
	<li>Позволяет задать константность указателя</li>
	<li>Позволяет указать, что данный метод не модифицирует члены класса, т.е. сохраняет состояние объекта</li>
</ol>

<p>Учтите что&nbsp;константный метод может изменять члены класса, если они объявлены как&nbsp;<strong>mutable</strong></p>

<h2>Можете ли вы написать пример какого-нибудь алгоритма сортировки?</h2>

<p>Первое что приходит всем на ум это сортировка пузырьком.</p>

<h3>Рассмотрим пузырковую сортировку без временных переменных</h3>

<pre><code class="language-cpp hljs "><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T &gt;
<span class="hljs-keyword">void</span> bubble_sort( T &amp;a )
{
    <span class="hljs-keyword">for</span>( T::size_type i = <span class="hljs-number">0</span>; a.size() &amp;&amp; i &lt; a.size() - <span class="hljs-number">1</span>; ++i )
    {
        <span class="hljs-keyword">for</span>( T::size_type j = i; j + <span class="hljs-number">1</span> &gt; <span class="hljs-number">0</span>; --j )
        {
            <span class="hljs-keyword">if</span>( a[j] &gt; a[j+<span class="hljs-number">1</span>] )
                <span class="hljs-built_in">std</span>::swap( a[j], a[j+<span class="hljs-number">1</span>] );
        }
    }
}

<span class="hljs-built_in">std</span>::<span class="hljs-stl_container"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;</span> v;
v.push_back( <span class="hljs-number">7</span> );
v.push_back( <span class="hljs-number">1000</span> );
v.push_back( <span class="hljs-number">134</span> );
v.push_back( <span class="hljs-number">23</span> );
v.push_back( <span class="hljs-number">1</span> );
bubble_sort( v );</code></pre>

<h2>Напишите код для реверса&nbsp;строки?</h2>

<pre><code class="language-cpp hljs "><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T &gt;
<span class="hljs-keyword">void</span> invert_string( T &amp;a )
{
    T::size_type length = a.size();
    <span class="hljs-keyword">for</span>( T::size_type i = <span class="hljs-number">0</span>; i &lt; (length/<span class="hljs-number">2</span>); ++i )
    {
        <span class="hljs-built_in">std</span>::swap( a[i], a[length - i - <span class="hljs-number">1</span>] );
    }
}

<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> str = <span class="hljs-string">"abcdefg"</span>;
invert_string(str);</code></pre>

<h2>Как защитить объект от копирования?</h2>

<p>Сделать&nbsp;<strong>private</strong>&nbsp;конструктор копирования и оператор&nbsp;<strong>=</strong>.</p>

<pre><code class="language-cpp hljs "><span class="hljs-keyword">class</span> NonCopyable
{
<span class="hljs-keyword">public</span>:
    NonCopyable(){}

<span class="hljs-keyword">private</span>:
    NonCopyable(NonCopyable&amp;){}
    
<span class="hljs-keyword">private</span>:
    <span class="hljs-keyword">void</span> <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> NonCopyable&amp;){}
};

NonCopyable a; 
NonCopyable b = a; <span class="hljs-comment">// error C2248: 'NonCopyable::NonCopyable' : cannot access private member</span>
a = b; <span class="hljs-comment">// error C2248: 'NonCopyable::operator =' : cannot access private member</span></code></pre>

<h2>В чем разница между&nbsp;struct&nbsp;и&nbsp;class?</h2>

<p>Практически ни в чем. В&nbsp;<strong>struct</strong>&nbsp;модификаторы доступа по умолчанию&nbsp;<strong>public</strong>, в&nbsp;<strong>class</strong>&nbsp;<strong>private</strong>. Также отличается и наследование по умолчанию, у&nbsp;<strong>struct</strong>&nbsp;—&nbsp;<strong>public</strong>, у&nbsp;<strong>class</strong>&nbsp;—&nbsp;<strong>private</strong>.</p>

<h2>Сколько в памяти занимает произвольная структура?</h2>

<p><strong>sizeof</strong>&nbsp;всех членов + остаток для выравнивания (по умолчанию выравнивание 4 байта) +&nbsp;<strong>sizeof&nbsp;</strong>указателя на&nbsp;<strong>vtable</strong>&nbsp;(если есть виртуальные функции) + указатели на классы предков, от которых было сделано&nbsp;<strong>виртуальное</strong>&nbsp;наследование (размер указателя * количество классов)</p>

<p>&nbsp;</p>

<h2>Как сгенерировать pure virtual function call исключение?</h2>

<p>Нужно вызвать чисто виртуальный метод в конструкторе родительского 
класса т.е. до создания дочернего, в котором этот метод реализован. Т.к.
 современный компилятор не даст это сделать напрямую, то нужно будет 
использовать промежуточный метод.</p>

<pre><code class="language-cpp hljs "><span class="hljs-keyword">class</span> Base
{
<span class="hljs-keyword">public</span>:
    Base()
    {
        base_func();
    }
    <span class="hljs-keyword">void</span> base_func()
    {
        func(); <span class="hljs-comment">// pure virtual function call exception</span>
    }
    <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> func() = <span class="hljs-number">0</span>;
};
<span class="hljs-keyword">class</span> Derived : <span class="hljs-keyword">public</span> Base
{
<span class="hljs-keyword">public</span>:
    <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> func()
    {
    }
};</code></pre>

<h2>В чем отличие vector от deque?</h2>

<p>Здесь вспоминают о наличии у&nbsp;<strong>deque</strong>&nbsp;методов&nbsp;<strong>push_front</strong>&nbsp;и&nbsp;<strong>pop_front</strong>. Но основное отличие в организации памяти, у&nbsp;<strong>vector</strong>&nbsp;она как у обычного Си-массива, т.е. последовательный и непрерывный набор байт, а у&nbsp;<strong>deque</strong>&nbsp;это фрагменты с разрывами. За счет этого отличия&nbsp;<strong>vector</strong>&nbsp;всегда можно привести к обычному массиву или скопировать целиком участок памяти, но зато у&nbsp;<strong>deque</strong>&nbsp;операции вставки/удаления в начало быстрее (<strong>O(1)</strong>&nbsp;против&nbsp;<strong>O(n)</strong>), ввиду того, что не нужно перемещать&nbsp;</p>

<h2>В чем отличие malloc от new?</h2>

<p>malloc&nbsp;— выделение блока памяти в стиле Си, опасное с точки зрения приведения типов (non-typesafe), т.к. возвращает&nbsp;<strong>void *</strong>&nbsp;и требует обязательного приведения.&nbsp;<strong>new</strong>&nbsp;— выделение блока памяти и последующий&nbsp;<strong>вызов конструктора</strong>, безопасное с точки зрения приведения типов (typesafe), т.к. тип возвращаемого значения определен заранее.</p>

<h2>В чем различия между dynamic_cast и reinterpret_cast?</h2>

<p>xxx_cast&lt;type_to&gt;(expression_from)</p>

<p>Динамическое приведение - это безопасное приведение по иерархии 
наследования, в том числе и для виртуального наследования. Проводит 
преобразование типа, предварительно убедившись (с помощью RTTI), что 
объект expression_from в действительности является объектом типа 
type_to. Если нет: для указателей возвращает NULL.</p>

<p>При reinterpret_cast результат не гарантирован, проверки не 
осуществляются. Ограничения на expression_from: порядковый тип 
(логический, символьный, целый, перечисляемый), указатель, ссылка. 
Ограничения на type_to: для порядкового типа или указателя — порядковый 
тип или указатель. Для ссылки — ссылка.</p>

<h2>Для чего нужен аллокатор и как создать свой собственный аллокатор?</h2>

<p>Аллокатор это шаблонный класс, который отвечает за выделение памяти и
 создание объектов. По умолчанию все контейнера используют 
std::allocator&lt;T&gt;.&nbsp;<br>
В языке c++ имеется так же возможность написать свой аллокатор. У своего алокатора должно быть такое объявление:</p>

<pre><code class="language-cpp hljs "><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> T&gt; 
    <span class="hljs-keyword">class</span> my_allocator  
    { 
      <span class="hljs-keyword">typedef</span> size_t    size_type; 
      <span class="hljs-keyword">typedef</span> ptrdiff_t difference_type; 
      <span class="hljs-keyword">typedef</span> T*        pointer; 
      <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">const</span> T*  const_pointer; 
      <span class="hljs-keyword">typedef</span> T&amp;        reference; 
      <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">const</span> T&amp;  const_reference; 
      <span class="hljs-keyword">typedef</span> T         value_type; 
 
      pointer allocate(size_type st, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* hint = <span class="hljs-number">0</span>); 
      <span class="hljs-keyword">void</span> deallocate (pointer p, size_type st); 
      <span class="hljs-keyword">void</span> construct (pointer p, const_reference val); 
      <span class="hljs-keyword">void</span> destroy (pointer p); 
      <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> U&gt;  
      <span class="hljs-keyword">struct</span> rebind { <span class="hljs-keyword">typedef</span> allocator&lt;U&gt; other; }; 
    }; </code></pre>

<h2>В чём суть множественного наследования? Какие проблемы могут возникнуть при его использовании? Как их преодолеть?</h2>

<p>Множественное наследование – мощный способ связи классов в с++. С 
помощью множественного наследования класс может иметь сразу несколько 
базовых классов, объединяя в себе их свойства. Однако данный метод 
порождает определенные неудобства, из-за которых множественно 
наследование отсутствует в таком языке, как Java, к примеру, уберегая 
программиста от возможных проблем, и вынуждая его строить механизм 
множественного наследования без порождения выше упомянутых проблем.<br>
Проблемы, собственно говоря, возникают, когда имеет место такая ситуация:<br>
Пусть класс A – базовый, далее классы B и С наследуют A, к классу D 
применено множественное наследование - для него базовыми являются 
одновременно B и C. Программа видит эту структуры таким образом:<br>
A(1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A(2)<br>
|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>
B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;&nbsp;/<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D<br>
Теперь, вызывая из D метод, расположенный в A программа сталкивается с 
неоднозначностью: а из «какого» A вызывать? A(1) или A(2)?&nbsp;<br>
Избежать данной проблемы поможет использование ключевого слова virtual, 
которое превращает класс A в виртуальный класс, так сказать «класс – 
шаблон». Теперь никакой неоднозначности нет, и ситуация выглядит вот 
так:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A<br>
&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<br>
B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C<br>
&nbsp;&nbsp;&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D</p>

<h2>Какая разница между указателями:&nbsp;</h2>

<pre><code class=" hljs cpp"><span class="hljs-keyword">int</span>*&nbsp;i=<span class="hljs-keyword">new</span>&nbsp;<span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>];&nbsp;
<span class="hljs-keyword">int</span>*&nbsp;j=(<span class="hljs-keyword">int</span>*)&nbsp;<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0</span>);</code></pre>

<h3>Ответ:&nbsp;</h3>

<pre><code class=" hljs cs"><span class="hljs-keyword">int</span>*&nbsp;i=<span class="hljs-keyword">new</span>&nbsp;<span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>];</code></pre>

<p>возвращает ненулевой указатель, а</p>

<pre><code class=" hljs cpp"><span class="hljs-keyword">int</span>*&nbsp;j=(<span class="hljs-keyword">int</span>*)&nbsp;<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0</span>);</code></pre>

<p>возвращает нулевой указатель.</p>

<pre><code class=" hljs cs"><span class="hljs-keyword">int</span>*&nbsp;i=<span class="hljs-keyword">new</span>&nbsp;<span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>];&nbsp;</code></pre>

<p>выделит память в GlobalHeap, а</p>

<pre><code class=" hljs cpp"><span class="hljs-keyword">int</span>*&nbsp;j=(<span class="hljs-keyword">int</span>*)&nbsp;<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0</span>);&nbsp;</code></pre>

<p>выделит в LocalHeap.&nbsp;<br>
<br>
Отсюда в оператора&nbsp;<strong>new</strong>&nbsp;преимущества в памяти.</p>

<h2>В чем основное различие между деструктором и оператором delete?</h2>

<p>Оператор delete освобождает область памяти зарезервированную ранее с 
помощью оператора new. При этом для объектов автоматически будет вызван 
деструктор. Деструктор содержит код, который необходимо выполнить до 
освобождения памяти, например, освобождение системных ресурсов и т.д. 
Вызов деструктора вручную не приводит к освобождению памяти, занимаемой 
объектом.</p>

<h2>Чем отличается vector от deque?</h2>

<p>Отличие в организации памяти, у vector она как у обычного Си-массива -
 последовательный и непрерывный набор байт, а у deque это фрагменты с 
разрывами. За счет этого отличия vector всегда можно привести к обычному
 массиву или скопировать целиком участок памяти, но зато у deque 
операции вставки/удаления в начало быстрее (O(1) против O(n)), ввиду 
того, что не нужно перемещать остальные значения. А также наличие у 
deque методов push_front и pop_front.</p>

<h2>Что можно сказать о&nbsp;delete this?</h2>

<p>Это выражение считается выражением плохого тона и нужно стараться избегать его использования, так как оно ведет к ошибкам.<br>
Данная конструкция имеет две ловушки.<br>
Во-первых, если оно выполняется в методе extern, static или automatic 
объекта, программа скорее всего завершится досрочно вскоре после 
выполнения оператора delete. Не существует переносимого способа 
сообщить, что объект создан на куче, таким образом класс не может 
проверить корректно ли объект создался.<br>
Во-вторых, при таком самоуничтожении, программа может и не узнать об 
этом. Для нее объект по-прежнему продолжает существовать, несмотря на 
то, что это не так. Любое обращение к this или к любым данным объекта 
приведет к катастрофическим последствиям. При этом методы, которые не 
содержат обращения к полям-данным объекта, выполняются нормально.</p>

<h2>В чем разница между массивом и списком?</h2>

<p>Массив – это набор однородных элементов, а список – разнородных.<br>
Распределение памяти массива всегда статическое и непрерывное, а в списке все это динамическое и рандомное.</p>

<p>В случае с массивами пользователю не нужно управлять выделением 
памяти, а при использовании списков придется, из-за ее динамичности.</p>

<p>&nbsp;</p>

                </div>
                <footer class="tags">
                                    <a class="tag" href="https://bool.dev/blog/tags/c-plus-plus"><span itemprop="keywords">C++</span></a>
                                    <a class="tag" href="https://bool.dev/blog/tags/checklist"><span itemprop="keywords">Checklist</span></a>
                </footer>
                <section class="mb-20" id="comments">
    <h2>Комментарии:</h2>
        <div class="info px-20">
            <i class="fas fa-info mr-10 rem-15"></i>
            <span>
                Пожалуйста <a href="https://bool.dev/account/login?ReturnUrl=%2Fblog%2Fdetail%2Ftipichnye-voprosy-na-sobesedovanii-po-cplusplus" rel="nofollow noopener noreferrer">авторизируйтесь</a>,
                чтобы получить возможность оставлять комментарии
            </span>
        </div>


</section>
            </div>
        </article>
    </div>
    <div class="right">
        <aside class="border-container">
    <h2 class="border-title">Редакция рекомендует</h2>
    <div class="content px-0">
        <a href="https://bit.ly/2oLtbx2" title="Подпишись на наш телеграм канал" target="_blank" rel="nofollow noreferrer noopener">
            <img data-src="https://jopr-site.azureedge.net/src/img/tg.png?v=3" class=" lazyloaded" alt="Телеграмм канал bool.dev" src="%D0%A2%D0%B8%D0%BF%D0%B8%D1%87%D0%BD%D1%8B%D0%B5%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B%20%D0%BD%D0%B0%20%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B8%20%D0%BF%D0%BE%20C++%20%E2%80%94%20bool.dev_files/tg.png" width="280" height="354">
        </a>
    </div>
</aside>
        <aside class="border-container mt-20 mb-20 blog-nav">
            <h2 class="border-title">Навигация по статье</h2>
            <div class="content navigation" id="navigator-items">
            <div class="item h2"><span onclick="clickToNavigation(0)">Зачем нужен виртуальный деструктор?</span></div><div class="item h3"><span onclick="clickToNavigation(1)">Output:</span></div><div class="item h2"><span onclick="clickToNavigation(2)">Что стоит помнить при использовании исключений в конструкторе объекта?</span></div><div class="item h3"><span onclick="clickToNavigation(3)">Например:</span></div><div class="item h3"><span onclick="clickToNavigation(4)">Output:</span></div><div class="item h3"><span onclick="clickToNavigation(5)">&nbsp;Пример умного указателя:</span></div><div class="item h2"><span onclick="clickToNavigation(6)">Для каких целей применяется ключевое слово&nbsp;const?</span></div><div class="item h2"><span onclick="clickToNavigation(7)">Можете ли вы написать пример какого-нибудь алгоритма сортировки?</span></div><div class="item h3"><span onclick="clickToNavigation(8)">Рассмотрим пузырковую сортировку без временных переменных</span></div><div class="item h2"><span onclick="clickToNavigation(9)">Напишите код для реверса&nbsp;строки?</span></div><div class="item h2"><span onclick="clickToNavigation(10)">Как защитить объект от копирования?</span></div><div class="item h2"><span onclick="clickToNavigation(11)">В чем разница между&nbsp;struct&nbsp;и&nbsp;class?</span></div><div class="item h2"><span onclick="clickToNavigation(12)">Сколько в памяти занимает произвольная структура?</span></div><div class="item h2"><span onclick="clickToNavigation(13)">Как сгенерировать pure virtual function call исключение?</span></div><div class="item h2"><span onclick="clickToNavigation(14)">В чем отличие vector от deque?</span></div><div class="item h2"><span onclick="clickToNavigation(15)">В чем отличие malloc от new?</span></div><div class="item h2"><span onclick="clickToNavigation(16)">В чем различия между dynamic_cast и reinterpret_cast?</span></div><div class="item h2"><span onclick="clickToNavigation(17)">Для чего нужен аллокатор и как создать свой собственный аллокатор?</span></div><div class="item h2"><span onclick="clickToNavigation(18)">В чём суть множественного наследования? Какие проблемы могут возникнуть при его использовании? Как их преодолеть?</span></div><div class="item h2"><span onclick="clickToNavigation(19)">Какая разница между указателями:&nbsp;</span></div><div class="item h3"><span onclick="clickToNavigation(20)">Ответ:&nbsp;</span></div><div class="item h2"><span onclick="clickToNavigation(21)">В чем основное различие между деструктором и оператором delete?</span></div><div class="item h2"><span onclick="clickToNavigation(22)">Чем отличается vector от deque?</span></div><div class="item h2"><span onclick="clickToNavigation(23)">Что можно сказать о&nbsp;delete this?</span></div><div class="item h2"><span onclick="clickToNavigation(24)">В чем разница между массивом и списком?</span></div></div>
        </aside>
        <aside class="border-container mb-20">
    <h4 class="border-title">Наши площадки:</h4>
    <div class="content mb-15 social">
        <a href="https://t.me/booldev" class="none mr-30" target="_blank" rel="nofollow noreferrer noopener" title="Наш телеграмчик">
            <i class="fab fa-telegram-plane"></i>
        </a>
        <a href="https://www.linkedin.com/company/booldev" class="none mr-30" target="_blank" rel="nofollow noreferrer noopener" title="Наш linkedin">
            <i class="fab fa-linkedin-in"></i>
        </a>
        <a href="https://www.facebook.com/www.bool.dev" class="none mr-30" target="_blank" rel="nofollow noreferrer noopener" title="Мы в fb">
            <i class="fab fa-facebook-f"></i>
        </a>
        <a href="https://twitter.com/wwwbooldev" class="none mr-30" target="_blank" rel="nofollow noreferrer noopener" title="Наш твиттер">
            <i class="fab fa-twitter"></i>
        </a>
        <a href="https://www.instagram.com/bool.dev/" class="none" target="_blank" rel="nofollow noreferrer noopener" title="Наш инстаграмм">
            <i class="fab fa-instagram"></i>
        </a>       
    </div>
</aside>
    </div>
</div>
        </main>
    </div>
    <footer id="footer">
        <div class="about-links rem-90">
            <a class="mr-10" href="https://bool.dev/about">О проекте</a>
            <a href="https://bool.dev/about/feedback">Обратная связь</a>
        </div>
        <div class="right">
            <div class="social-links mr-40">
                <a href="https://t.me/booldev" class="none mr-10" target="_blank" rel="nofollow noreferrer noopener" title="Наш телеграмчик">
                    <i class="fab fa-telegram-plane"></i>
                </a>
                <a href="https://www.linkedin.com/company/booldev" class="none mr-10" target="_blank" rel="nofollow noreferrer noopener" title="Наш linkedin">
                    <i class="fab fa-linkedin-in"></i>
                </a>
                <a href="https://www.facebook.com/www.bool.dev" class="none mr-10" target="_blank" rel="nofollow noreferrer noopener" title="Мы в fb">
                    <i class="fab fa-facebook-f"></i>
                </a>
                <a href="https://twitter.com/wwwbooldev" class="none mr-10" target="_blank" rel="nofollow noreferrer noopener" title="Наш твиттер">
                    <i class="fab fa-twitter"></i>
                </a>
                <a href="https://www.instagram.com/bool.dev/" class="none mr-10" target="_blank" rel="nofollow noreferrer noopener" title="Наш инстаграмм">
                    <i class="fab fa-instagram"></i>
                </a>               
            </div>
            <span class="rem-90 copyright">Copyright © 2022 bool.dev</span>
        </div>
    </footer>
    <script src="%D0%A2%D0%B8%D0%BF%D0%B8%D1%87%D0%BD%D1%8B%D0%B5%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B%20%D0%BD%D0%B0%20%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B8%20%D0%BF%D0%BE%20C++%20%E2%80%94%20bool.dev_files/bundle.js" async=""></script>
    <script src="%D0%A2%D0%B8%D0%BF%D0%B8%D1%87%D0%BD%D1%8B%D0%B5%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B%20%D0%BD%D0%B0%20%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B8%20%D0%BF%D0%BE%20C++%20%E2%80%94%20bool.dev_files/lazysizes.min.js" async=""></script>
    <script async="" src="%D0%A2%D0%B8%D0%BF%D0%B8%D1%87%D0%BD%D1%8B%D0%B5%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B%20%D0%BD%D0%B0%20%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B8%20%D0%BF%D0%BE%20C++%20%E2%80%94%20bool.dev_files/js"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
        gtag('config', 'UA-38069144-3');
    </script>
    
<script src="%D0%A2%D0%B8%D0%BF%D0%B8%D1%87%D0%BD%D1%8B%D0%B5%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B%20%D0%BD%D0%B0%20%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B8%20%D0%BF%D0%BE%20C++%20%E2%80%94%20bool.dev_files/highlight.pack.js" async=""></script>
<script>
    var xhr = new XMLHttpRequest();
    xhr.open("POST", '/blog/ReadPost?slug=tipichnye-voprosy-na-sobesedovanii-po-cplusplus', true);
    xhr.send();
</script>



</body></html>